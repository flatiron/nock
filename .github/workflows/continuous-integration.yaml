name: Continuous Integration

on:
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - master

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          key: npm-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: |
            npm-
      - name: Install dependencies
        run: npm ci --ignore-scripts --no-audit --prefer-offline --progress=false
      - name: Format
        run: npm run format
  lint-javascript:
    name: Lint JavaScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          key: npm-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: |
            npm-
      - name: Cache local cache
        uses: actions/cache@v1
        with:
          key: eslint-${{ github.sha }}
          path: .cache
          restore-keys: |
            eslint-
      - name: Install dependencies
        run: npm ci --ignore-scripts --no-audit --prefer-offline --progress=false
      - name: Lint
        run: |
          # This is required to workaround a limitation of ESLint which uses
          # file modification time in its cache, instead of file checksum.
          #
          # cspell:ignore iregex
          find . \
            -type d -name "node_modules" -prune -o \
            -type f -iregex '.*.ts' \
            -exec ./scripts/ci/set_mtime_to_md5.sh {} \;
          npm run lint:js
  lint-typescript:
    name: Lint TypeScript declaration files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          key: npm-${{ hashFiles('**/package-lock.json') }}
          path: ~/.npm
          restore-keys: |
            npm-
      - name: Install dependencies
        run: npm ci --ignore-scripts --no-audit --prefer-offline --progress=false
      - name: Lint
        run: |
          npm run lint:ts
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      # The following two steps can be greatly simplified once
      # https://github.com/actions/cache/issues/39 is fixed.
      - if: runner.os != 'Windows'
        name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: |
            npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-
      - if: runner.os == 'Windows'
        name: Cache npm dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: |
            npm-${{ runner.os }}-${{ hashFiles('**\package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-
      - name: Install dependencies
        run: npm ci --ignore-scripts --no-audit --prefer-offline --progress=false
      # The following conditional can be removed once tests are fully migrated
      # to Mocha. Alternatively a grep command used to select correct files can
      # be refactored to work on Windows. Ideally all tests should be run across
      # all platforms.
      - if: runner.os != 'Windows'
        name: Test
        run: npm run test
      - if: runner.os == 'Windows'
        name: Test
        run: npm run test:tap
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        node: [8, 10, 12, 13]
